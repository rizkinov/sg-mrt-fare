This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-03-05T13:54:24.030Z

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
app/
  globals.css
  layout.tsx
  page.tsx
components/
  ui/
    button.tsx
    card.tsx
    dialog.tsx
    label.tsx
    radio-group.tsx
    select.tsx
  fare-calculator.tsx
  mrt-map.tsx
public/
  data/
    fare_data.json
    mrt_lines.json
    mrt_stations.json
    station_distances.json
next-env.d.ts
next.config.js
package.json
postcss.config.js
README.md
singapore-mrt-fare-calculator-prd.md
tailwind.config.js
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="app/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
@layer base {
  :root {
    /* Base colors */
    --foreground-rgb: 0, 0, 0;
    --background-start-rgb: 240, 240, 240;
    --background-end-rgb: 255, 255, 255;
    /* Shadcn UI variables */
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 221.2 83.2% 53.3%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 221.2 83.2% 53.3%;
    --radius: 0.5rem;
  }
}
body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}
/* MRT Line Colors */
.line-NS { color: #e12323; }
.line-EW { color: #009645; }
.line-NE { color: #9900aa; }
.line-CC { color: #fa9e0d; }
.line-DT { color: #005ec4; }
.line-TE { color: #9D5516; }
/* Custom styling for the fare calculator */
.fare-calculator {
  max-width: 1200px;
  margin: 0 auto;
  padding: 1rem;
}
/* Responsive adjustments */
@media (max-width: 768px) {
  .fare-calculator {
    padding: 0.5rem;
  }
}
</file>

<file path="app/layout.tsx">
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
const inter = Inter({ subsets: ["latin"] });
export const metadata: Metadata = {
  title: "Singapore MRT Fare Calculator",
  description: "Calculate MRT fares between any two stations in Singapore's MRT network",
};
export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className="light">
      <body className={`${inter.className} bg-white text-black`}>{children}</body>
    </html>
  );
}
</file>

<file path="app/page.tsx">
import FareCalculator from "@/components/fare-calculator";
export default function Home() {
  return (
    <main className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-4 py-8">
        <header className="mb-8 text-center">
          <h1 className="text-3xl font-bold text-gray-900 mb-2">Singapore MRT Fare Calculator</h1>
          <p className="text-gray-600">Select your starting and destination stations to calculate the fare</p>
        </header>
        <div className="bg-white rounded-lg shadow-md p-6">
          <FareCalculator />
        </div>
        <footer className="mt-8 text-center text-sm text-gray-500">
          <p>Fare data based on latest information as of December 2024</p>
          <p className="mt-2">This is an unofficial tool and fares may vary. Please refer to official sources for the most accurate information.</p>
        </footer>
      </div>
    </main>
  );
}
</file>

<file path="components/ui/button.tsx">
import React from 'react';
interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'default' | 'outline' | 'secondary' | 'destructive' | 'ghost' | 'link';
  size?: 'default' | 'sm' | 'lg' | 'icon';
  children: React.ReactNode;
}
export function Button({
  className = '',
  variant = 'default',
  size = 'default',
  children,
  ...props
}: ButtonProps) {
  const baseStyles = 'inline-flex items-center justify-center rounded-md font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none';
  const variantStyles = {
    default: 'bg-primary text-primary-foreground hover:bg-primary/90',
    outline: 'border border-input hover:bg-accent hover:text-accent-foreground',
    secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',
    destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
    ghost: 'hover:bg-accent hover:text-accent-foreground',
    link: 'underline-offset-4 hover:underline text-primary',
  };
  const sizeStyles = {
    default: 'h-10 py-2 px-4',
    sm: 'h-9 px-3 rounded-md',
    lg: 'h-11 px-8 rounded-md',
    icon: 'h-10 w-10',
  };
  const combinedClassName = `${baseStyles} ${variantStyles[variant]} ${sizeStyles[size]} ${className}`;
  return (
    <button className={combinedClassName} {...props}>
      {children}
    </button>
  );
}
</file>

<file path="components/ui/card.tsx">
import React from 'react';
interface CardProps extends React.HTMLAttributes<HTMLDivElement> {}
export function Card({ className = '', ...props }: CardProps) {
  return (
    <div
      className={`rounded-lg border bg-card text-card-foreground shadow-sm ${className}`}
      {...props}
    />
  );
}
interface CardHeaderProps extends React.HTMLAttributes<HTMLDivElement> {}
export function CardHeader({ className = '', ...props }: CardHeaderProps) {
  return (
    <div
      className={`flex flex-col space-y-1.5 p-6 ${className}`}
      {...props}
    />
  );
}
interface CardTitleProps extends React.HTMLAttributes<HTMLHeadingElement> {}
export function CardTitle({ className = '', ...props }: CardTitleProps) {
  return (
    <h3
      className={`text-2xl font-semibold leading-none tracking-tight ${className}`}
      {...props}
    />
  );
}
interface CardDescriptionProps extends React.HTMLAttributes<HTMLParagraphElement> {}
export function CardDescription({ className = '', ...props }: CardDescriptionProps) {
  return (
    <p
      className={`text-sm text-muted-foreground ${className}`}
      {...props}
    />
  );
}
interface CardContentProps extends React.HTMLAttributes<HTMLDivElement> {}
export function CardContent({ className = '', ...props }: CardContentProps) {
  return (
    <div
      className={`p-6 pt-0 ${className}`}
      {...props}
    />
  );
}
interface CardFooterProps extends React.HTMLAttributes<HTMLDivElement> {}
export function CardFooter({ className = '', ...props }: CardFooterProps) {
  return (
    <div
      className={`flex items-center p-6 pt-0 ${className}`}
      {...props}
    />
  );
}
</file>

<file path="components/ui/dialog.tsx">
import React, { useState } from 'react';
interface DialogProps {
  className?: string;
  children: React.ReactNode;
}
export function Dialog({ className = '', children }: DialogProps) {
  const [open, setOpen] = useState(false);
  // Find the trigger and content components
  let triggerElement = null;
  let contentElement = null;
  React.Children.forEach(children, (child) => {
    if (React.isValidElement(child)) {
      if (child.type === DialogTrigger) {
        triggerElement = React.cloneElement(child, { onClick: () => setOpen(true) });
      } else if (child.type === DialogContent) {
        contentElement = React.cloneElement(child, { onClose: () => setOpen(false) });
      }
    }
  });
  return (
    <div className={className}>
      {triggerElement}
      {open && (
        <div className="fixed inset-0 z-50 flex items-center justify-center">
          <div className="fixed inset-0 bg-black/50" onClick={() => setOpen(false)} />
          {contentElement}
        </div>
      )}
    </div>
  );
}
interface DialogTriggerProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  className?: string;
  children: React.ReactNode;
  asChild?: boolean;
}
export function DialogTrigger({ className = '', children, asChild, ...props }: DialogTriggerProps) {
  if (asChild && React.isValidElement(children)) {
    return React.cloneElement(children, {
      ...props,
      className: `${children.props.className || ''} ${className}`.trim()
    });
  }
  return (
    <button className={className} {...props}>
      {children}
    </button>
  );
}
interface DialogContentProps {
  className?: string;
  children: React.ReactNode;
  onClose?: () => void;
}
export function DialogContent({ className = '', children, onClose }: DialogContentProps) {
  return (
    <div className={`relative z-50 w-full max-w-md rounded-lg bg-background p-6 shadow-lg ${className}`}>
      <button 
        className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none"
        onClick={onClose}
      >
        <span className="sr-only">Close</span>
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
      {children}
    </div>
  );
}
interface DialogHeaderProps {
  className?: string;
  children: React.ReactNode;
}
export function DialogHeader({ className = '', children }: DialogHeaderProps) {
  return (
    <div className={`flex flex-col space-y-1.5 text-center sm:text-left ${className}`}>
      {children}
    </div>
  );
}
interface DialogTitleProps {
  className?: string;
  children: React.ReactNode;
}
export function DialogTitle({ className = '', children }: DialogTitleProps) {
  return (
    <h2 className={`text-lg font-semibold leading-none tracking-tight ${className}`}>
      {children}
    </h2>
  );
}
</file>

<file path="components/ui/label.tsx">
import React from 'react';
interface LabelProps extends React.LabelHTMLAttributes<HTMLLabelElement> {
  className?: string;
}
export function Label({ className = '', ...props }: LabelProps) {
  return (
    <label
      className={`text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 ${className}`}
      {...props}
    />
  );
}
</file>

<file path="components/ui/radio-group.tsx">
import React from 'react';
interface RadioGroupProps extends React.HTMLAttributes<HTMLDivElement> {
  className?: string;
  value: string;
  onValueChange: (value: string) => void;
  children: React.ReactNode;
}
export function RadioGroup({ 
  className = '', 
  value, 
  onValueChange, 
  children, 
  ...props 
}: RadioGroupProps) {
  return (
    <div 
      className={`flex flex-col space-y-2 ${className}`} 
      role="radiogroup"
      {...props}
    >
      {React.Children.map(children, (child) => {
        if (React.isValidElement(child) && child.type === RadioGroupItem) {
          return React.cloneElement(child, {
            checked: child.props.value === value,
            onChange: () => onValueChange(child.props.value),
          });
        }
        return child;
      })}
    </div>
  );
}
interface RadioGroupItemProps extends React.InputHTMLAttributes<HTMLInputElement> {
  className?: string;
  value: string;
  id: string;
  children?: React.ReactNode;
}
export function RadioGroupItem({ 
  className = '', 
  value, 
  id, 
  children, 
  ...props 
}: RadioGroupItemProps) {
  return (
    <div className="flex items-center space-x-2">
      <input
        type="radio"
        id={id}
        value={value}
        className={`h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`}
        {...props}
      />
      {children && <label htmlFor={id} className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">{children}</label>}
    </div>
  );
}
</file>

<file path="components/ui/select.tsx">
import React, { useState, useRef, useEffect } from 'react';
interface SelectProps {
  id?: string;
  value: string;
  onValueChange: (value: string) => void;
  className?: string;
  placeholder?: string;
  children: React.ReactNode;
}
interface SelectItemProps {
  value: string;
  children: React.ReactNode;
  className?: string;
  onClick?: () => void;
}
export function Select({
  id,
  value,
  onValueChange,
  className = '',
  placeholder = 'Select an option',
  children
}: SelectProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [selectedLabel, setSelectedLabel] = useState<React.ReactNode>(placeholder);
  const selectRef = useRef<HTMLDivElement>(null);
  // Close the dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (selectRef.current && !selectRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);
  // Update the selected label when value changes
  useEffect(() => {
    // Find the label for the current value
    let label = placeholder;
    React.Children.forEach(children, (child) => {
      if (
        React.isValidElement(child) && 
        'value' in child.props && 
        child.props.value === value
      ) {
        label = child.props.children;
      }
    });
    setSelectedLabel(label);
  }, [value, children, placeholder]);
  return (
    <div className={className} ref={selectRef}>
      {/* Trigger */}
      <div
        id={id}
        className="flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 cursor-pointer"
        onClick={() => setIsOpen(!isOpen)}
        role="combobox"
        aria-expanded={isOpen}
      >
        <span className="block truncate">{selectedLabel}</span>
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          width="24" 
          height="24" 
          viewBox="0 0 24 24" 
          fill="none" 
          stroke="currentColor" 
          strokeWidth="2" 
          strokeLinecap="round" 
          strokeLinejoin="round" 
          className="h-4 w-4 opacity-50"
        >
          <path d="m6 9 6 6 6-6"/>
        </svg>
      </div>
      {/* Dropdown */}
      {isOpen && (
        <div className="absolute z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md animate-in fade-in-80 mt-1">
          <div className="max-h-[var(--radix-select-content-available-height)] overflow-auto p-1">
            {React.Children.map(children, (child) => {
              if (
                !React.isValidElement(child) || 
                !('value' in child.props)
              ) return null;
              // Type assertion to help TypeScript understand the structure
              const childElement = child as React.ReactElement<SelectItemProps>;
              return React.cloneElement(childElement, {
                onClick: () => {
                  onValueChange(childElement.props.value);
                  setIsOpen(false);
                }
              });
            })}
          </div>
        </div>
      )}
    </div>
  );
}
export function SelectItem({ value, children, className = '', ...props }: SelectItemProps & React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={`relative flex cursor-pointer select-none items-center rounded-sm py-1.5 px-2 text-sm outline-none hover:bg-accent hover:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 ${className}`}
      role="option"
      data-value={value}
      {...props}
    >
      {children}
    </div>
  );
}
</file>

<file path="components/fare-calculator.tsx">
"use client";
import React, { useState, useEffect } from "react";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Select,
  SelectItem
} from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { MrtMap } from '@/components/mrt-map';
type Station = {
  name: string;
  code: string;
  line: string;
  coordinates: [number, number];
};
type MrtLine = {
  name: string;
  color: string;
  stations: string[];
};
type FareData = {
  [category: string]: {
    [paymentMethod: string]: Record<string, number>;
  };
};
type StationDistances = Record<string, Record<string, number>>;
export default function FareCalculator() {
  const [stations, setStations] = useState<Station[]>([]);
  const [lines, setLines] = useState<MrtLine[]>([]);
  const [fareData, setFareData] = useState<FareData | null>(null);
  const [stationDistances, setStationDistances] = useState<StationDistances | null>(null);
  const [selectedStartStation, setSelectedStartStation] = useState<Station | null>(null);
  const [selectedEndStation, setSelectedEndStation] = useState<Station | null>(null);
  const [fareType, setFareType] = useState<"adult" | "student" | "senior">("adult");
  const [paymentMethod, setPaymentMethod] = useState<"card" | "cash">("card");
  const [calculatedFare, setCalculatedFare] = useState<number | null>(null);
  const [calculatedDistance, setCalculatedDistance] = useState<number | null>(null);
  const [selectionMode, setSelectionMode] = useState<"start" | "end">("start");
  const [selectedLine, setSelectedLine] = useState<string | null>(null);
  useEffect(() => {
    // Load station data
    fetch("/data/mrt_stations.json")
      .then((res) => res.json())
      .then((data) => {
        // Convert object to array of stations
        const formattedStations: Station[] = Object.values(data).map((station: any) => ({
          name: station.name,
          code: station.code,
          line: station.line,
          coordinates: Array.isArray(station.coordinates) 
            ? station.coordinates 
            : [parseFloat(station.longitude || 0), parseFloat(station.latitude || 0)],
        }));
        setStations(formattedStations);
      })
      .catch((error) => console.error("Error loading station data:", error));
    // Load line data
    fetch("/data/mrt_lines.json")
      .then((res) => res.json())
      .then((data) => {
        // Convert object to array of lines
        const formattedLines: MrtLine[] = Object.entries(data).map(([code, lineData]: [string, any]) => ({
          name: lineData.name,
          color: lineData.color,
          stations: lineData.stations,
        }));
        setLines(formattedLines);
      })
      .catch((error) => console.error("Error loading line data:", error));
    // Load fare data
    fetch("/data/fare_data.json")
      .then((res) => res.json())
      .then((data) => setFareData(data))
      .catch((error) => console.error("Error loading fare data:", error));
    // Load station distances
    fetch("/data/station_distances.json")
      .then((res) => res.json())
      .then((data) => setStationDistances(data))
      .catch((error) => console.error("Error loading station distances:", error));
  }, []);
  const getStationsByLine = (lineId: string | null) => {
    if (!lineId) return stations;
    const line = lines.find((l) => l.name === lineId);
    if (!line) return stations;
    return stations.filter((station) => line.stations.includes(station.code));
  };
  const calculateDistance = () => {
    if (!selectedStartStation || !selectedEndStation || !stationDistances) {
      return null;
    }
    // Try to find direct distance between stations
    const startCode = selectedStartStation.code;
    const endCode = selectedEndStation.code;
    // Check if we have a direct distance
    if (
      stationDistances[startCode] && 
      stationDistances[startCode][endCode] !== undefined
    ) {
      return stationDistances[startCode][endCode];
    }
    // If no direct distance, use a simple approximation
    // In a real app, you would implement a proper routing algorithm
    const startCoords = selectedStartStation.coordinates;
    const endCoords = selectedEndStation.coordinates;
    // Simple haversine distance calculation
    const R = 6371; // Earth radius in km
    const dLat = (endCoords[1] - startCoords[1]) * Math.PI / 180;
    const dLon = (endCoords[0] - startCoords[0]) * Math.PI / 180;
    const a = 
      Math.sin(dLat/2) * Math.sin(dLat/2) +
      Math.cos(startCoords[1] * Math.PI / 180) * Math.cos(endCoords[1] * Math.PI / 180) * 
      Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    const distance = R * c;
    return distance;
  };
  const calculateFare = () => {
    if (!fareData || !selectedStartStation || !selectedEndStation) {
      return null;
    }
    const distance = calculateDistance();
    if (distance === null) return null;
    setCalculatedDistance(distance);
    // Find the appropriate fare based on distance
    const fareTable = fareData[fareType][paymentMethod];
    const distanceKeys = Object.keys(fareTable)
      .map(Number)
      .sort((a, b) => a - b);
    // Find the appropriate distance bracket
    let fareBracket = distanceKeys[0];
    for (const key of distanceKeys) {
      if (distance <= key) {
        fareBracket = key;
        break;
      }
    }
    // If distance is greater than the largest bracket, use the largest
    if (distance > distanceKeys[distanceKeys.length - 1]) {
      fareBracket = distanceKeys[distanceKeys.length - 1];
    }
    return fareTable[fareBracket.toString()];
  };
  const handleStationSelect = (station: Station) => {
    if (selectionMode === "start") {
      setSelectedStartStation(station);
      setSelectionMode("end");
    } else {
      setSelectedEndStation(station);
      setSelectionMode("start");
    }
  };
  const handleCalculateFare = () => {
    const fare = calculateFare();
    setCalculatedFare(fare);
  };
  const getStationName = (station: Station | null) => {
    if (!station) return "Select a station";
    return `${station.name} (${station.code})`;
  };
  const filteredStations = getStationsByLine(selectedLine);
  return (
    <div className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <Card>
          <CardHeader>
            <CardTitle>Starting Station</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <Label htmlFor="line-select">Filter by Line</Label>
                <Select
                  id="line-select"
                  value={selectedLine || ""}
                  onValueChange={(value) => setSelectedLine(value || null)}
                  placeholder="All Lines"
                >
                  <SelectItem value="">All Lines</SelectItem>
                  {lines.map((line) => (
                    <SelectItem key={line.name} value={line.name}>
                      {line.name}
                    </SelectItem>
                  ))}
                </Select>
              </div>
              <div>
                <Label htmlFor="start-station">Starting Station</Label>
                <Select
                  id="start-station"
                  value={selectedStartStation?.code || ""}
                  onValueChange={(value) => {
                    const station = stations.find((s) => s.code === value);
                    if (station) setSelectedStartStation(station);
                  }}
                  placeholder="Select starting station"
                >
                  {filteredStations.map((station) => (
                    <SelectItem key={station.code} value={station.code}>
                      {station.name} ({station.code})
                    </SelectItem>
                  ))}
                </Select>
              </div>
            </div>
          </CardContent>
        </Card>
        <Card>
          <CardHeader>
            <CardTitle>Destination Station</CardTitle>
          </CardHeader>
          <CardContent>
            <div>
              <Label htmlFor="end-station">Destination Station</Label>
              <Select
                id="end-station"
                value={selectedEndStation?.code || ""}
                onValueChange={(value) => {
                  const station = stations.find((s) => s.code === value);
                  if (station) setSelectedEndStation(station);
                }}
                placeholder="Select destination station"
              >
                {filteredStations.map((station) => (
                  <SelectItem key={station.code} value={station.code}>
                    {station.name} ({station.code})
                  </SelectItem>
                ))}
              </Select>
            </div>
          </CardContent>
        </Card>
      </div>
      <Card>
        <CardHeader>
          <CardTitle>Fare Options</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <div>
                <h3 className="text-sm font-medium mb-2">Passenger Type</h3>
                <RadioGroup
                  value={fareType}
                  onValueChange={(value) => setFareType(value as "adult" | "student" | "senior")}
                  className="flex flex-col space-y-2"
                >
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="adult" id="adult" />
                    <Label htmlFor="adult">Adult</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="student" id="student" />
                    <Label htmlFor="student">Student</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="senior" id="senior" />
                    <Label htmlFor="senior">Senior</Label>
                  </div>
                </RadioGroup>
              </div>
            </div>
            <div className="space-y-4">
              <div>
                <h3 className="text-sm font-medium mb-2">Payment Method</h3>
                <RadioGroup
                  value={paymentMethod}
                  onValueChange={(value) => setPaymentMethod(value as "card" | "cash")}
                  className="flex flex-col space-y-2"
                >
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="card" id="card" />
                    <Label htmlFor="card">EZ-Link / NETS FlashPay</Label>
                  </div>
                  <div className="flex items-center space-x-2">
                    <RadioGroupItem value="cash" id="cash" />
                    <Label htmlFor="cash">Cash / Standard Ticket</Label>
                  </div>
                </RadioGroup>
              </div>
            </div>
          </div>
          <div className="mt-6">
            <Button 
              onClick={handleCalculateFare}
              disabled={!selectedStartStation || !selectedEndStation}
              className="w-full"
            >
              Calculate Fare
            </Button>
          </div>
        </CardContent>
      </Card>
      {calculatedFare !== null && (
        <Card>
          <CardHeader>
            <CardTitle>Fare Result</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div>
                <p className="text-sm text-gray-500">From {getStationName(selectedStartStation)} to {getStationName(selectedEndStation)}</p>
                <p className="text-sm text-gray-500">Distance: {calculatedDistance?.toFixed(1)} km</p>
                <p className="text-2xl font-bold mt-2">${calculatedFare.toFixed(2)}</p>
                <p className="text-sm text-gray-500">
                  {fareType === "adult" ? "Adult" : fareType === "student" ? "Student" : "Senior"} fare with {paymentMethod === "card" ? "EZ-Link / NETS FlashPay" : "Cash / Standard Ticket"}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      )}
      <Dialog>
        <DialogTrigger asChild>
          <Button variant="outline" className="w-full">View MRT Map</Button>
        </DialogTrigger>
        <DialogContent className="max-w-4xl">
          <DialogHeader>
            <DialogTitle>Singapore MRT Map</DialogTitle>
          </DialogHeader>
          <div className="h-[600px]">
            <MrtMap
              stations={stations}
              lines={lines}
              selectedStartStation={selectedStartStation}
              selectedEndStation={selectedEndStation}
              onStationSelect={handleStationSelect}
              selectionMode={selectionMode}
            />
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
</file>

<file path="components/mrt-map.tsx">
"use client";
import React, { useState, useEffect } from "react";
import Map, { Marker, Popup, NavigationControl } from "react-map-gl";
import "mapbox-gl/dist/mapbox-gl.css";
// Use the environment variable for the Mapbox token
const MAPBOX_TOKEN = process.env.NEXT_PUBLIC_MAPBOX_TOKEN || "";
// Define types
type Station = {
  name: string;
  code: string;
  line: string;
  coordinates: [number, number];
};
type MrtLine = {
  name: string;
  color: string;
  stations: string[];
};
type MrtMapProps = {
  stations: Station[];
  lines: MrtLine[];
  selectedStartStation?: Station | null;
  selectedEndStation?: Station | null;
  onStationSelect?: (station: Station, selectionType: 'start' | 'end') => void;
  selectionMode?: 'start' | 'end' | null;
};
export function MrtMap({
  stations,
  lines,
  selectedStartStation,
  selectedEndStation,
  onStationSelect,
  selectionMode
}: MrtMapProps) {
  const [popupInfo, setPopupInfo] = useState<Station | null>(null);
  const [viewState, setViewState] = useState({
    longitude: 103.8198,
    latitude: 1.3521,
    zoom: 11
  });
  const [mapError, setMapError] = useState<string | null>(null);
  // Check if Mapbox token is available
  useEffect(() => {
    if (!MAPBOX_TOKEN) {
      setMapError("Mapbox token is missing. Please add a valid token to your .env.local file.");
    }
  }, []);
  // Get station coordinates
  const getStationCoordinates = (station: Station): [number, number] => {
    return station.coordinates;
  };
  // Get station color based on selection
  const getStationColor = (station: Station): string => {
    if (selectedStartStation && station.code === selectedStartStation.code) {
      return '#00ff00'; // Green for start station
    }
    if (selectedEndStation && station.code === selectedEndStation.code) {
      return '#ff0000'; // Red for end station
    }
    // Get the line color
    const line = lines.find(l => l.stations.includes(station.code));
    return line ? line.color : '#888888';
  };
  // Handle station click
  const handleStationClick = (station: Station) => {
    if (!selectionMode || !onStationSelect) {
      setPopupInfo(station);
      return;
    }
    onStationSelect(station, selectionMode);
  };
  // Handle map errors
  const handleMapError = (e: any) => {
    console.error("Map error:", e);
    setMapError("An error occurred with the map. Please check your Mapbox token.");
  };
  if (mapError) {
    return (
      <div className="flex flex-col items-center justify-center h-[500px] bg-gray-100 rounded-lg border border-gray-300 p-4">
        <div className="text-red-500 font-medium mb-2">⚠️ Map Error</div>
        <p className="text-center text-gray-700">{mapError}</p>
        <p className="text-center text-gray-500 text-sm mt-2">
          Please ensure you have a valid Mapbox token in your .env.local file.
        </p>
      </div>
    );
  }
  return (
    <div style={{ width: '100%', height: '500px' }}>
      <Map
        {...viewState}
        onMove={evt => setViewState(evt.viewState)}
        mapStyle="mapbox://styles/mapbox/streets-v11"
        mapboxAccessToken={MAPBOX_TOKEN}
        onError={handleMapError}
      >
        <NavigationControl position="top-right" />
        {stations.map(station => (
          <Marker
            key={station.code}
            longitude={station.coordinates[0]}
            latitude={station.coordinates[1]}
            color={getStationColor(station)}
            onClick={e => {
              e.originalEvent.stopPropagation();
              handleStationClick(station);
            }}
          />
        ))}
        {popupInfo && (
          <Popup
            longitude={popupInfo.coordinates[0]}
            latitude={popupInfo.coordinates[1]}
            anchor="bottom"
            onClose={() => setPopupInfo(null)}
          >
            <div>
              <h3>{popupInfo.name}</h3>
              <p>Station Code: {popupInfo.code}</p>
              <p>Line: {popupInfo.line}</p>
              {onStationSelect && (
                <div>
                  <button onClick={() => onStationSelect(popupInfo, 'start')}>
                    Set as Start
                  </button>
                  <button onClick={() => onStationSelect(popupInfo, 'end')}>
                    Set as Destination
                  </button>
                </div>
              )}
            </div>
          </Popup>
        )}
      </Map>
    </div>
  );
}
</file>

<file path="public/data/fare_data.json">
{
  "adult": {
    "card": {
      "3.2": 1.19,
      "4.2": 1.29,
      "5.2": 1.40,
      "6.2": 1.50,
      "7.2": 1.59,
      "8.2": 1.66,
      "9.2": 1.73,
      "10.2": 1.80,
      "11.2": 1.87,
      "12.2": 1.94,
      "13.2": 2.01,
      "14.2": 2.08,
      "15.2": 2.15,
      "16.2": 2.22,
      "17.2": 2.29,
      "18.2": 2.36,
      "19.2": 2.43,
      "20.2": 2.50,
      "21.2": 2.57,
      "22.2": 2.64,
      "23.2": 2.71,
      "24.2": 2.78,
      "25.2": 2.85,
      "26.2": 2.92,
      "27.2": 2.99,
      "28.2": 3.06,
      "29.2": 3.13,
      "30.2": 3.20,
      "31.2": 3.27,
      "32.2": 3.34,
      "33.2": 3.41,
      "34.2": 3.48,
      "35.2": 3.55,
      "36.2": 3.62,
      "37.2": 3.69,
      "38.2": 3.76,
      "39.2": 3.83,
      "40.2": 3.90,
      "999": 3.97
    },
    "cash": {
      "3.2": 1.70,
      "4.2": 1.90,
      "5.2": 2.10,
      "6.2": 2.20,
      "7.2": 2.30,
      "8.2": 2.40,
      "9.2": 2.50,
      "10.2": 2.60,
      "11.2": 2.70,
      "12.2": 2.80,
      "13.2": 2.90,
      "14.2": 3.00,
      "15.2": 3.10,
      "16.2": 3.20,
      "17.2": 3.30,
      "18.2": 3.40,
      "19.2": 3.50,
      "20.2": 3.60,
      "21.2": 3.70,
      "22.2": 3.80,
      "23.2": 3.90,
      "24.2": 4.00,
      "25.2": 4.10,
      "26.2": 4.20,
      "27.2": 4.30,
      "28.2": 4.40,
      "29.2": 4.50,
      "30.2": 4.60,
      "31.2": 4.70,
      "32.2": 4.80,
      "33.2": 4.90,
      "34.2": 5.00,
      "35.2": 5.10,
      "36.2": 5.20,
      "37.2": 5.30,
      "38.2": 5.40,
      "39.2": 5.50,
      "40.2": 5.60,
      "999": 5.70
    }
  },
  "student": {
    "card": {
      "3.2": 0.47,
      "4.2": 0.51,
      "5.2": 0.55,
      "6.2": 0.59,
      "7.2": 0.63,
      "8.2": 0.67,
      "9.2": 0.71,
      "10.2": 0.75,
      "11.2": 0.79,
      "12.2": 0.83,
      "13.2": 0.87,
      "14.2": 0.91,
      "15.2": 0.95,
      "16.2": 0.99,
      "17.2": 1.03,
      "18.2": 1.07,
      "19.2": 1.11,
      "20.2": 1.15,
      "21.2": 1.19,
      "22.2": 1.23,
      "23.2": 1.27,
      "24.2": 1.31,
      "25.2": 1.35,
      "26.2": 1.39,
      "27.2": 1.43,
      "28.2": 1.47,
      "29.2": 1.51,
      "30.2": 1.55,
      "31.2": 1.59,
      "32.2": 1.63,
      "33.2": 1.67,
      "34.2": 1.71,
      "35.2": 1.75,
      "36.2": 1.79,
      "37.2": 1.83,
      "38.2": 1.87,
      "39.2": 1.91,
      "40.2": 1.95,
      "999": 1.99
    },
    "cash": {
      "3.2": 0.90,
      "4.2": 1.00,
      "5.2": 1.10,
      "6.2": 1.20,
      "7.2": 1.30,
      "8.2": 1.40,
      "9.2": 1.50,
      "10.2": 1.60,
      "11.2": 1.70,
      "12.2": 1.80,
      "13.2": 1.90,
      "14.2": 2.00,
      "15.2": 2.10,
      "16.2": 2.20,
      "17.2": 2.30,
      "18.2": 2.40,
      "19.2": 2.50,
      "20.2": 2.60,
      "21.2": 2.70,
      "22.2": 2.80,
      "23.2": 2.90,
      "24.2": 3.00,
      "25.2": 3.10,
      "26.2": 3.20,
      "27.2": 3.30,
      "28.2": 3.40,
      "29.2": 3.50,
      "30.2": 3.60,
      "31.2": 3.70,
      "32.2": 3.80,
      "33.2": 3.90,
      "34.2": 4.00,
      "35.2": 4.10,
      "36.2": 4.20,
      "37.2": 4.30,
      "38.2": 4.40,
      "39.2": 4.50,
      "40.2": 4.60,
      "999": 4.70
    }
  },
  "senior": {
    "card": {
      "3.2": 0.63,
      "4.2": 0.67,
      "5.2": 0.71,
      "6.2": 0.75,
      "7.2": 0.79,
      "8.2": 0.83,
      "9.2": 0.87,
      "10.2": 0.91,
      "11.2": 0.95,
      "12.2": 0.99,
      "13.2": 1.03,
      "14.2": 1.07,
      "15.2": 1.11,
      "16.2": 1.15,
      "17.2": 1.19,
      "18.2": 1.23,
      "19.2": 1.27,
      "20.2": 1.31,
      "21.2": 1.35,
      "22.2": 1.39,
      "23.2": 1.43,
      "24.2": 1.47,
      "25.2": 1.51,
      "26.2": 1.55,
      "27.2": 1.59,
      "28.2": 1.63,
      "29.2": 1.67,
      "30.2": 1.71,
      "31.2": 1.75,
      "32.2": 1.79,
      "33.2": 1.83,
      "34.2": 1.87,
      "35.2": 1.91,
      "36.2": 1.95,
      "37.2": 1.99,
      "38.2": 2.03,
      "39.2": 2.07,
      "40.2": 2.11,
      "999": 2.15
    },
    "cash": {
      "3.2": 0.90,
      "4.2": 1.00,
      "5.2": 1.10,
      "6.2": 1.20,
      "7.2": 1.30,
      "8.2": 1.40,
      "9.2": 1.50,
      "10.2": 1.60,
      "11.2": 1.70,
      "12.2": 1.80,
      "13.2": 1.90,
      "14.2": 2.00,
      "15.2": 2.10,
      "16.2": 2.20,
      "17.2": 2.30,
      "18.2": 2.40,
      "19.2": 2.50,
      "20.2": 2.60,
      "21.2": 2.70,
      "22.2": 2.80,
      "23.2": 2.90,
      "24.2": 3.00,
      "25.2": 3.10,
      "26.2": 3.20,
      "27.2": 3.30,
      "28.2": 3.40,
      "29.2": 3.50,
      "30.2": 3.60,
      "31.2": 3.70,
      "32.2": 3.80,
      "33.2": 3.90,
      "34.2": 4.00,
      "35.2": 4.10,
      "36.2": 4.20,
      "37.2": 4.30,
      "38.2": 4.40,
      "39.2": 4.50,
      "40.2": 4.60,
      "999": 4.70
    }
  },
  "distances": {}
}
</file>

<file path="public/data/mrt_lines.json">
{
  "NS": {
    "name": "North-South Line",
    "color": "#e12323",
    "stations": ["NS1", "NS2", "NS3", "NS4", "NS5", "NS7", "NS8", "NS9", "NS10", "NS11", "NS13", "NS14", "NS15", "NS16", "NS17", "NS18", "NS19", "NS20", "NS21", "NS22", "NS23", "NS24", "NS25", "NS26", "NS27", "NS28"]
  },
  "EW": {
    "name": "East-West Line",
    "color": "#009645",
    "stations": ["EW1", "EW2", "EW3", "EW4", "EW5", "EW6", "EW7", "EW8", "EW9", "EW10", "EW11", "EW12", "EW13", "EW14", "EW15", "EW16", "EW17", "EW18", "EW19", "EW20", "EW21", "EW22", "EW23", "EW24"]
  },
  "NE": {
    "name": "North-East Line",
    "color": "#9900aa",
    "stations": ["NE1", "NE3", "NE4", "NE5", "NE6", "NE7", "NE8", "NE9", "NE10", "NE11", "NE12", "NE13", "NE14", "NE15", "NE16", "NE17"]
  },
  "CC": {
    "name": "Circle Line",
    "color": "#fa9e0d",
    "stations": ["CC1", "CC2", "CC3", "CC4", "CC5", "CC6", "CC7", "CC8", "CC9", "CC10", "CC11", "CC12", "CC13", "CC14", "CC15", "CC16", "CC17", "CC19", "CC20", "CC21", "CC22", "CC23", "CC24", "CC25", "CC26", "CC27", "CC28", "CC29"]
  },
  "DT": {
    "name": "Downtown Line",
    "color": "#005ec4",
    "stations": ["DT1", "DT2", "DT3", "DT5", "DT6", "DT7", "DT8", "DT9", "DT10", "DT11", "DT12", "DT13", "DT14", "DT15", "DT16", "DT17", "DT18", "DT19"]
  },
  "TE": {
    "name": "Thomson-East Coast Line",
    "color": "#9D5516",
    "stations": ["TE1", "TE2", "TE3", "TE4", "TE5", "TE6", "TE7", "TE8", "TE9", "TE10", "TE11", "TE12", "TE13", "TE14", "TE15", "TE16", "TE17", "TE18", "TE19", "TE20"]
  }
}
</file>

<file path="public/data/mrt_stations.json">
{
  "NS1": {
    "name": "Jurong East",
    "code": "NS1",
    "line": "NS",
    "coordinates": [103.7422, 1.3331]
  },
  "NS2": {
    "name": "Bukit Batok",
    "code": "NS2",
    "line": "NS",
    "coordinates": [103.7493, 1.3491]
  },
  "NS3": {
    "name": "Bukit Gombak",
    "code": "NS3",
    "line": "NS",
    "coordinates": [103.7519, 1.3591]
  },
  "NS4": {
    "name": "Choa Chu Kang",
    "code": "NS4",
    "line": "NS",
    "coordinates": [103.7472, 1.3852]
  },
  "NS5": {
    "name": "Yew Tee",
    "code": "NS5",
    "line": "NS",
    "coordinates": [103.7475, 1.3972]
  },
  "NS7": {
    "name": "Kranji",
    "code": "NS7",
    "line": "NS",
    "coordinates": [103.7624, 1.4251]
  },
  "NS8": {
    "name": "Marsiling",
    "code": "NS8",
    "line": "NS",
    "coordinates": [103.7741, 1.4325]
  },
  "NS9": {
    "name": "Woodlands",
    "code": "NS9",
    "line": "NS",
    "coordinates": [103.7864, 1.4369]
  },
  "NS10": {
    "name": "Admiralty",
    "code": "NS10",
    "line": "NS",
    "coordinates": [103.8009, 1.4406]
  },
  "NS11": {
    "name": "Sembawang",
    "code": "NS11",
    "line": "NS",
    "coordinates": [103.8201, 1.4491]
  },
  "NS13": {
    "name": "Yishun",
    "code": "NS13",
    "line": "NS",
    "coordinates": [103.8349, 1.4295]
  },
  "NS14": {
    "name": "Khatib",
    "code": "NS14",
    "line": "NS",
    "coordinates": [103.8329, 1.4174]
  },
  "NS15": {
    "name": "Yio Chu Kang",
    "code": "NS15",
    "line": "NS",
    "coordinates": [103.8349, 1.3817]
  },
  "NS16": {
    "name": "Ang Mo Kio",
    "code": "NS16",
    "line": "NS",
    "coordinates": [103.8396, 1.3699]
  },
  "NS17": {
    "name": "Bishan",
    "code": "NS17",
    "line": "NS",
    "coordinates": [103.8483, 1.3513]
  },
  "NS18": {
    "name": "Braddell",
    "code": "NS18",
    "line": "NS",
    "coordinates": [103.8468, 1.3402]
  },
  "NS19": {
    "name": "Toa Payoh",
    "code": "NS19",
    "line": "NS",
    "coordinates": [103.8474, 1.3326]
  },
  "NS20": {
    "name": "Novena",
    "code": "NS20",
    "line": "NS",
    "coordinates": [103.8438, 1.3204]
  },
  "NS21": {
    "name": "Newton",
    "code": "NS21",
    "line": "NS",
    "coordinates": [103.8376, 1.3138]
  },
  "NS22": {
    "name": "Orchard",
    "code": "NS22",
    "line": "NS",
    "coordinates": [103.8324, 1.3043]
  },
  "NS23": {
    "name": "Somerset",
    "code": "NS23",
    "line": "NS",
    "coordinates": [103.8389, 1.3004]
  },
  "NS24": {
    "name": "Dhoby Ghaut",
    "code": "NS24",
    "line": "NS",
    "coordinates": [103.8458, 1.2988]
  },
  "NS25": {
    "name": "City Hall",
    "code": "NS25",
    "line": "NS",
    "coordinates": [103.8523, 1.2931]
  },
  "NS26": {
    "name": "Raffles Place",
    "code": "NS26",
    "line": "NS",
    "coordinates": [103.8514, 1.2839]
  },
  "NS27": {
    "name": "Marina Bay",
    "code": "NS27",
    "line": "NS",
    "coordinates": [103.8546, 1.2765]
  },
  "NS28": {
    "name": "Marina South Pier",
    "code": "NS28",
    "line": "NS",
    "coordinates": [103.8633, 1.2713]
  },
  "EW1": {
    "name": "Pasir Ris",
    "code": "EW1",
    "line": "EW",
    "coordinates": [103.9494, 1.3731]
  },
  "EW2": {
    "name": "Tampines",
    "code": "EW2",
    "line": "EW",
    "coordinates": [103.9454, 1.3546]
  },
  "EW3": {
    "name": "Simei",
    "code": "EW3",
    "line": "EW",
    "coordinates": [103.9534, 1.3432]
  },
  "EW4": {
    "name": "Tanah Merah",
    "code": "EW4",
    "line": "EW",
    "coordinates": [103.9465, 1.3271]
  },
  "EW5": {
    "name": "Bedok",
    "code": "EW5",
    "line": "EW",
    "coordinates": [103.9302, 1.3240]
  },
  "EW6": {
    "name": "Kembangan",
    "code": "EW6",
    "line": "EW",
    "coordinates": [103.9131, 1.3210]
  },
  "EW7": {
    "name": "Eunos",
    "code": "EW7",
    "line": "EW",
    "coordinates": [103.9031, 1.3197]
  },
  "EW8": {
    "name": "Paya Lebar",
    "code": "EW8",
    "line": "EW",
    "coordinates": [103.8923, 1.3178]
  },
  "EW9": {
    "name": "Aljunied",
    "code": "EW9",
    "line": "EW",
    "coordinates": [103.8828, 1.3164]
  },
  "EW10": {
    "name": "Kallang",
    "code": "EW10",
    "line": "EW",
    "coordinates": [103.8714, 1.3115]
  },
  "EW11": {
    "name": "Lavender",
    "code": "EW11",
    "line": "EW",
    "coordinates": [103.8631, 1.3074]
  },
  "EW12": {
    "name": "Bugis",
    "code": "EW12",
    "line": "EW",
    "coordinates": [103.8558, 1.3008]
  },
  "EW13": {
    "name": "City Hall",
    "code": "EW13",
    "line": "EW",
    "coordinates": [103.8523, 1.2931]
  },
  "EW14": {
    "name": "Raffles Place",
    "code": "EW14",
    "line": "EW",
    "coordinates": [103.8514, 1.2839]
  },
  "EW15": {
    "name": "Tanjong Pagar",
    "code": "EW15",
    "line": "EW",
    "coordinates": [103.8459, 1.2765]
  },
  "EW16": {
    "name": "Outram Park",
    "code": "EW16",
    "line": "EW",
    "coordinates": [103.8394, 1.2805]
  },
  "EW17": {
    "name": "Tiong Bahru",
    "code": "EW17",
    "line": "EW",
    "coordinates": [103.8274, 1.2862]
  },
  "EW18": {
    "name": "Redhill",
    "code": "EW18",
    "line": "EW",
    "coordinates": [103.8168, 1.2896]
  },
  "EW19": {
    "name": "Queenstown",
    "code": "EW19",
    "line": "EW",
    "coordinates": [103.8058, 1.2948]
  },
  "EW20": {
    "name": "Commonwealth",
    "code": "EW20",
    "line": "EW",
    "coordinates": [103.7984, 1.3025]
  },
  "EW21": {
    "name": "Buona Vista",
    "code": "EW21",
    "line": "EW",
    "coordinates": [103.7902, 1.3072]
  },
  "EW22": {
    "name": "Dover",
    "code": "EW22",
    "line": "EW",
    "coordinates": [103.7786, 1.3115]
  },
  "EW23": {
    "name": "Clementi",
    "code": "EW23",
    "line": "EW",
    "coordinates": [103.7651, 1.3152]
  },
  "EW24": {
    "name": "Jurong East",
    "code": "EW24",
    "line": "EW",
    "coordinates": [103.7422, 1.3331]
  },
  "NE1": {
    "name": "HarbourFront",
    "code": "NE1",
    "line": "NE",
    "coordinates": [103.8208, 1.2657]
  },
  "NE3": {
    "name": "Outram Park",
    "code": "NE3",
    "line": "NE",
    "coordinates": [103.8394, 1.2805]
  },
  "NE4": {
    "name": "Chinatown",
    "code": "NE4",
    "line": "NE",
    "coordinates": [103.8437, 1.2847]
  },
  "NE5": {
    "name": "Clarke Quay",
    "code": "NE5",
    "line": "NE",
    "coordinates": [103.8465, 1.2883]
  },
  "NE6": {
    "name": "Dhoby Ghaut",
    "code": "NE6",
    "line": "NE",
    "coordinates": [103.8458, 1.2988]
  },
  "NE7": {
    "name": "Little India",
    "code": "NE7",
    "line": "NE",
    "coordinates": [103.8507, 1.3067]
  },
  "NE8": {
    "name": "Farrer Park",
    "code": "NE8",
    "line": "NE",
    "coordinates": [103.8541, 1.3125]
  },
  "NE9": {
    "name": "Boon Keng",
    "code": "NE9",
    "line": "NE",
    "coordinates": [103.8619, 1.3195]
  },
  "NE10": {
    "name": "Potong Pasir",
    "code": "NE10",
    "line": "NE",
    "coordinates": [103.8691, 1.3311]
  },
  "NE11": {
    "name": "Woodleigh",
    "code": "NE11",
    "line": "NE",
    "coordinates": [103.8708, 1.3392]
  },
  "NE12": {
    "name": "Serangoon",
    "code": "NE12",
    "line": "NE",
    "coordinates": [103.8735, 1.3502]
  },
  "NE13": {
    "name": "Kovan",
    "code": "NE13",
    "line": "NE",
    "coordinates": [103.8851, 1.3601]
  },
  "NE14": {
    "name": "Hougang",
    "code": "NE14",
    "line": "NE",
    "coordinates": [103.8927, 1.3712]
  },
  "NE15": {
    "name": "Buangkok",
    "code": "NE15",
    "line": "NE",
    "coordinates": [103.8931, 1.3829]
  },
  "NE16": {
    "name": "Sengkang",
    "code": "NE16",
    "line": "NE",
    "coordinates": [103.8954, 1.3917]
  },
  "NE17": {
    "name": "Punggol",
    "code": "NE17",
    "line": "NE",
    "coordinates": [103.9023, 1.4047]
  },
  "CC1": {
    "name": "Dhoby Ghaut",
    "code": "CC1",
    "line": "CC",
    "coordinates": [103.8458, 1.2988]
  },
  "CC2": {
    "name": "Bras Basah",
    "code": "CC2",
    "line": "CC",
    "coordinates": [103.8512, 1.2969]
  },
  "CC3": {
    "name": "Esplanade",
    "code": "CC3",
    "line": "CC",
    "coordinates": [103.8554, 1.2935]
  },
  "CC4": {
    "name": "Promenade",
    "code": "CC4",
    "line": "CC",
    "coordinates": [103.8607, 1.2935]
  },
  "CC5": {
    "name": "Nicoll Highway",
    "code": "CC5",
    "line": "CC",
    "coordinates": [103.8636, 1.3001]
  },
  "CC6": {
    "name": "Stadium",
    "code": "CC6",
    "line": "CC",
    "coordinates": [103.8753, 1.3028]
  },
  "CC7": {
    "name": "Mountbatten",
    "code": "CC7",
    "line": "CC",
    "coordinates": [103.8826, 1.3062]
  },
  "CC8": {
    "name": "Dakota",
    "code": "CC8",
    "line": "CC",
    "coordinates": [103.8886, 1.3086]
  },
  "CC9": {
    "name": "Paya Lebar",
    "code": "CC9",
    "line": "CC",
    "coordinates": [103.8923, 1.3178]
  },
  "CC10": {
    "name": "MacPherson",
    "code": "CC10",
    "line": "CC",
    "coordinates": [103.8898, 1.3267]
  },
  "CC11": {
    "name": "Tai Seng",
    "code": "CC11",
    "line": "CC",
    "coordinates": [103.8878, 1.3359]
  },
  "CC12": {
    "name": "Bartley",
    "code": "CC12",
    "line": "CC",
    "coordinates": [103.8798, 1.3429]
  },
  "CC13": {
    "name": "Serangoon",
    "code": "CC13",
    "line": "CC",
    "coordinates": [103.8735, 1.3502]
  },
  "CC14": {
    "name": "Lorong Chuan",
    "code": "CC14",
    "line": "CC",
    "coordinates": [103.8642, 1.3515]
  },
  "CC15": {
    "name": "Bishan",
    "code": "CC15",
    "line": "CC",
    "coordinates": [103.8483, 1.3513]
  },
  "CC16": {
    "name": "Marymount",
    "code": "CC16",
    "line": "CC",
    "coordinates": [103.8394, 1.3491]
  },
  "CC17": {
    "name": "Caldecott",
    "code": "CC17",
    "line": "CC",
    "coordinates": [103.8394, 1.3378]
  },
  "CC19": {
    "name": "Botanic Gardens",
    "code": "CC19",
    "line": "CC",
    "coordinates": [103.8149, 1.3225]
  },
  "CC20": {
    "name": "Farrer Road",
    "code": "CC20",
    "line": "CC",
    "coordinates": [103.8075, 1.3173]
  },
  "CC21": {
    "name": "Holland Village",
    "code": "CC21",
    "line": "CC",
    "coordinates": [103.7961, 1.3119]
  },
  "CC22": {
    "name": "Buona Vista",
    "code": "CC22",
    "line": "CC",
    "coordinates": [103.7902, 1.3072]
  },
  "CC23": {
    "name": "one-north",
    "code": "CC23",
    "line": "CC",
    "coordinates": [103.7874, 1.2997]
  },
  "CC24": {
    "name": "Kent Ridge",
    "code": "CC24",
    "line": "CC",
    "coordinates": [103.7846, 1.2935]
  },
  "CC25": {
    "name": "Haw Par Villa",
    "code": "CC25",
    "line": "CC",
    "coordinates": [103.7819, 1.2829]
  },
  "CC26": {
    "name": "Pasir Panjang",
    "code": "CC26",
    "line": "CC",
    "coordinates": [103.7916, 1.2761]
  },
  "CC27": {
    "name": "Labrador Park",
    "code": "CC27",
    "line": "CC",
    "coordinates": [103.8025, 1.2724]
  },
  "CC28": {
    "name": "Telok Blangah",
    "code": "CC28",
    "line": "CC",
    "coordinates": [103.8097, 1.2705]
  },
  "CC29": {
    "name": "HarbourFront",
    "code": "CC29",
    "line": "CC",
    "coordinates": [103.8208, 1.2657]
  },
  "DT1": {
    "name": "Bukit Panjang",
    "code": "DT1",
    "line": "DT",
    "coordinates": [103.7642, 1.3785]
  },
  "DT2": {
    "name": "Cashew",
    "code": "DT2",
    "line": "DT",
    "coordinates": [103.7642, 1.3697]
  },
  "DT3": {
    "name": "Hillview",
    "code": "DT3",
    "line": "DT",
    "coordinates": [103.7674, 1.3625]
  },
  "DT5": {
    "name": "Beauty World",
    "code": "DT5",
    "line": "DT",
    "coordinates": [103.7758, 1.3412]
  },
  "DT6": {
    "name": "King Albert Park",
    "code": "DT6",
    "line": "DT",
    "coordinates": [103.7832, 1.3357]
  },
  "DT7": {
    "name": "Sixth Avenue",
    "code": "DT7",
    "line": "DT",
    "coordinates": [103.7969, 1.3307]
  },
  "DT8": {
    "name": "Tan Kah Kee",
    "code": "DT8",
    "line": "DT",
    "coordinates": [103.8075, 1.3257]
  },
  "DT9": {
    "name": "Botanic Gardens",
    "code": "DT9",
    "line": "DT",
    "coordinates": [103.8149, 1.3225]
  },
  "DT10": {
    "name": "Stevens",
    "code": "DT10",
    "line": "DT",
    "coordinates": [103.8269, 1.3201]
  },
  "DT11": {
    "name": "Newton",
    "code": "DT11",
    "line": "DT",
    "coordinates": [103.8376, 1.3138]
  },
  "DT12": {
    "name": "Little India",
    "code": "DT12",
    "line": "DT",
    "coordinates": [103.8507, 1.3067]
  },
  "DT13": {
    "name": "Rochor",
    "code": "DT13",
    "line": "DT",
    "coordinates": [103.8528, 1.3035]
  },
  "DT14": {
    "name": "Bugis",
    "code": "DT14",
    "line": "DT",
    "coordinates": [103.8558, 1.3008]
  },
  "DT15": {
    "name": "Promenade",
    "code": "DT15",
    "line": "DT",
    "coordinates": [103.8607, 1.2935]
  },
  "DT16": {
    "name": "Bayfront",
    "code": "DT16",
    "line": "DT",
    "coordinates": [103.8592, 1.2821]
  },
  "DT17": {
    "name": "Downtown",
    "code": "DT17",
    "line": "DT",
    "coordinates": [103.8528, 1.2795]
  },
  "DT18": {
    "name": "Telok Ayer",
    "code": "DT18",
    "line": "DT",
    "coordinates": [103.8485, 1.2821]
  },
  "DT19": {
    "name": "Chinatown",
    "code": "DT19",
    "line": "DT",
    "coordinates": [103.8437, 1.2847]
  },
  "TE1": {
    "name": "Woodlands North",
    "code": "TE1",
    "line": "TE",
    "coordinates": [103.7851, 1.4482]
  },
  "TE2": {
    "name": "Woodlands",
    "code": "TE2",
    "line": "TE",
    "coordinates": [103.7864, 1.4369]
  },
  "TE3": {
    "name": "Woodlands South",
    "code": "TE3",
    "line": "TE",
    "coordinates": [103.7934, 1.4273]
  },
  "TE4": {
    "name": "Springleaf",
    "code": "TE4",
    "line": "TE",
    "coordinates": [103.8183, 1.3975]
  },
  "TE5": {
    "name": "Lentor",
    "code": "TE5",
    "line": "TE",
    "coordinates": [103.8352, 1.3875]
  },
  "TE6": {
    "name": "Mayflower",
    "code": "TE6",
    "line": "TE",
    "coordinates": [103.8372, 1.3702]
  },
  "TE7": {
    "name": "Bright Hill",
    "code": "TE7",
    "line": "TE",
    "coordinates": [103.8329, 1.3631]
  },
  "TE8": {
    "name": "Upper Thomson",
    "code": "TE8",
    "line": "TE",
    "coordinates": [103.8329, 1.3547]
  },
  "TE9": {
    "name": "Caldecott",
    "code": "TE9",
    "line": "TE",
    "coordinates": [103.8394, 1.3378]
  },
  "TE10": {
    "name": "Stevens",
    "code": "TE10",
    "line": "TE",
    "coordinates": [103.8269, 1.3201]
  },
  "TE11": {
    "name": "Napier",
    "code": "TE11",
    "line": "TE",
    "coordinates": [103.8241, 1.3061]
  },
  "TE12": {
    "name": "Orchard Boulevard",
    "code": "TE12",
    "line": "TE",
    "coordinates": [103.8271, 1.3025]
  },
  "TE13": {
    "name": "Orchard",
    "code": "TE13",
    "line": "TE",
    "coordinates": [103.8324, 1.3043]
  },
  "TE14": {
    "name": "Great World",
    "code": "TE14",
    "line": "TE",
    "coordinates": [103.8329, 1.2931]
  },
  "TE15": {
    "name": "Havelock",
    "code": "TE15",
    "line": "TE",
    "coordinates": [103.8312, 1.2869]
  },
  "TE16": {
    "name": "Outram Park",
    "code": "TE16",
    "line": "TE",
    "coordinates": [103.8394, 1.2805]
  },
  "TE17": {
    "name": "Maxwell",
    "code": "TE17",
    "line": "TE",
    "coordinates": [103.8437, 1.2795]
  },
  "TE18": {
    "name": "Shenton Way",
    "code": "TE18",
    "line": "TE",
    "coordinates": [103.8501, 1.2765]
  },
  "TE19": {
    "name": "Marina Bay",
    "code": "TE19",
    "line": "TE",
    "coordinates": [103.8546, 1.2765]
  },
  "TE20": {
    "name": "Gardens by the Bay",
    "code": "TE20",
    "line": "TE",
    "coordinates": [103.8651, 1.2805]
  }
}
</file>

<file path="public/data/station_distances.json">
{
  "NS1": {
    "NS2": 1.4,
    "EW24": 0.0
  },
  "NS2": {
    "NS1": 1.4,
    "NS3": 1.2
  },
  "NS3": {
    "NS2": 1.2,
    "NS4": 1.3
  },
  "NS4": {
    "NS3": 1.3,
    "NS5": 1.5,
    "EW4": 0.0
  },
  "NS5": {
    "NS4": 1.5,
    "NS7": 1.2
  },
  "NS7": {
    "NS5": 1.2,
    "NS8": 1.1
  },
  "NS8": {
    "NS7": 1.1,
    "NS9": 1.3
  },
  "NS9": {
    "NS8": 1.3,
    "NS10": 1.2,
    "DT9": 0.0,
    "TE2": 0.0
  },
  "NS10": {
    "NS9": 1.2,
    "NS11": 1.3
  },
  "NS11": {
    "NS10": 1.3,
    "NS13": 1.5,
    "NE11": 0.0
  },
  "NS13": {
    "NS11": 1.5,
    "NS14": 1.2
  },
  "NS14": {
    "NS13": 1.2,
    "NS15": 1.1,
    "TE14": 0.0
  },
  "NS15": {
    "NS14": 1.1,
    "NS16": 1.3
  },
  "NS16": {
    "NS15": 1.3,
    "NS17": 1.4
  },
  "NS17": {
    "NS16": 1.4,
    "NS18": 1.2,
    "CC15": 0.0
  },
  "NS18": {
    "NS17": 1.2,
    "NS19": 1.3
  },
  "NS19": {
    "NS18": 1.3,
    "NS20": 1.5
  },
  "NS20": {
    "NS19": 1.5,
    "NS21": 1.2
  },
  "NS21": {
    "NS20": 1.2,
    "NS22": 1.1,
    "DT11": 0.0
  },
  "NS22": {
    "NS21": 1.1,
    "NS23": 1.3,
    "TE13": 0.0
  },
  "NS23": {
    "NS22": 1.3,
    "NS24": 1.4
  },
  "NS24": {
    "NS23": 1.4,
    "NS25": 1.2,
    "NE6": 0.0,
    "CC1": 0.0
  },
  "NS25": {
    "NS24": 1.2,
    "NS26": 1.3,
    "EW13": 0.0,
    "CC11": 0.0
  },
  "NS26": {
    "NS25": 1.3,
    "NS27": 1.5,
    "EW14": 0.0,
    "DT15": 0.0
  },
  "NS27": {
    "NS26": 1.5,
    "NS28": 1.2,
    "CC22": 0.0,
    "TE14": 0.0,
    "TE19": 0.0
  },
  "NS28": {
    "NS27": 1.2
  },
  "EW1": {
    "EW2": 1.3
  },
  "EW2": {
    "EW1": 1.3,
    "EW3": 1.4
  },
  "EW3": {
    "EW2": 1.4,
    "EW4": 1.2
  },
  "EW4": {
    "EW3": 1.2,
    "EW5": 1.3,
    "NS4": 0.0
  },
  "EW5": {
    "EW4": 1.3,
    "EW6": 1.5
  },
  "EW6": {
    "EW5": 1.5,
    "EW7": 1.2
  },
  "EW7": {
    "EW6": 1.2,
    "EW8": 1.1
  },
  "EW8": {
    "EW7": 1.1,
    "EW9": 1.3,
    "CC9": 0.0
  },
  "EW9": {
    "EW8": 1.3,
    "EW10": 1.4
  },
  "EW10": {
    "EW9": 1.4,
    "EW11": 1.2
  },
  "EW11": {
    "EW10": 1.2,
    "EW12": 1.3
  },
  "EW12": {
    "EW11": 1.3,
    "EW13": 1.5,
    "DT14": 0.0
  },
  "EW13": {
    "EW12": 1.5,
    "EW14": 1.2,
    "NS25": 0.0,
    "NE4": 0.0,
    "DT15": 0.0
  },
  "EW14": {
    "EW13": 1.2,
    "EW15": 1.1,
    "NS26": 0.0,
    "TE11": 0.0
  },
  "EW15": {
    "EW14": 1.1,
    "EW16": 1.3
  },
  "EW16": {
    "EW15": 1.3,
    "EW17": 1.4,
    "TE17": 0.0,
    "NE3": 0.0
  },
  "EW17": {
    "EW16": 1.4,
    "EW18": 1.2
  },
  "EW18": {
    "EW17": 1.2,
    "EW19": 1.3
  },
  "EW19": {
    "EW18": 1.3,
    "EW20": 1.5,
    "CC22": 0.0
  },
  "EW20": {
    "EW19": 1.5,
    "EW21": 1.2
  },
  "EW21": {
    "EW20": 1.2,
    "EW22": 1.1,
    "CC22": 0.0
  },
  "EW22": {
    "EW21": 1.1,
    "EW23": 1.3
  },
  "EW23": {
    "EW22": 1.3,
    "EW24": 1.4
  },
  "EW24": {
    "EW23": 1.4,
    "NS1": 0.0,
    "CC1": 0.0
  },
  "NE1": {
    "NE3": 1.5,
    "CC4": 0.0
  },
  "NE3": {
    "NE1": 1.5,
    "NE4": 1.2,
    "EW16": 0.0
  },
  "NE4": {
    "NE3": 1.2,
    "NE5": 1.1,
    "DT19": 0.0,
    "EW13": 0.0
  },
  "NE5": {
    "NE4": 1.1,
    "NE6": 1.3
  },
  "NE6": {
    "NE5": 1.3,
    "NE7": 1.4,
    "NS24": 0.0,
    "CC7": 0.0
  },
  "NE7": {
    "NE6": 1.4,
    "NE8": 1.2,
    "DT12": 0.0
  },
  "NE8": {
    "NE7": 1.2,
    "NE9": 1.3
  },
  "NE9": {
    "NE8": 1.3,
    "NE10": 1.5
  },
  "NE10": {
    "NE9": 1.5,
    "NE11": 1.2
  },
  "NE11": {
    "NE10": 1.2,
    "NE12": 1.1,
    "NS11": 0.0
  },
  "NE12": {
    "NE11": 1.1,
    "NE13": 1.3,
    "CC13": 0.0
  },
  "NE13": {
    "NE12": 1.3,
    "NE14": 1.4
  },
  "NE14": {
    "NE13": 1.4,
    "NE15": 1.2
  },
  "NE15": {
    "NE14": 1.2,
    "NE16": 1.3
  },
  "NE16": {
    "NE15": 1.3,
    "NE17": 1.5,
    "DT24": 0.0
  },
  "NE17": {
    "NE16": 1.5
  },
  "CC1": {
    "CC2": 1.2,
    "NS24": 0.0,
    "EW24": 0.0
  },
  "CC2": {
    "CC1": 1.2,
    "CC3": 1.1
  },
  "CC3": {
    "CC2": 1.1,
    "CC4": 1.3
  },
  "CC4": {
    "CC3": 1.3,
    "CC5": 1.4,
    "DT15": 0.0,
    "NE1": 0.0
  },
  "CC5": {
    "CC4": 1.4,
    "CC6": 1.2
  },
  "CC6": {
    "CC5": 1.2,
    "CC7": 1.3,
    "NE6": 0.0
  },
  "CC7": {
    "CC6": 1.3,
    "CC8": 1.5
  },
  "CC8": {
    "CC7": 1.5,
    "CC9": 1.2
  },
  "CC9": {
    "CC8": 1.2,
    "CC10": 1.1,
    "DT9": 0.0,
    "EW8": 0.0
  },
  "CC10": {
    "CC9": 1.1,
    "CC11": 1.3
  },
  "CC11": {
    "CC10": 1.3,
    "CC12": 1.4,
    "NS25": 0.0
  },
  "CC12": {
    "CC11": 1.4,
    "CC13": 1.2
  },
  "CC13": {
    "CC12": 1.2,
    "CC14": 1.3,
    "NE12": 0.0
  },
  "CC14": {
    "CC13": 1.3,
    "CC15": 1.5
  },
  "CC15": {
    "CC14": 1.5,
    "CC16": 1.2,
    "NS17": 0.0,
    "TE9": 0.0
  },
  "CC16": {
    "CC15": 1.2,
    "CC17": 1.1
  },
  "CC17": {
    "CC16": 1.1,
    "CC19": 1.3,
    "TE9": 0.0
  },
  "CC19": {
    "CC17": 1.3,
    "CC20": 1.4,
    "DT9": 0.0
  },
  "CC20": {
    "CC19": 1.4,
    "CC21": 1.2
  },
  "CC21": {
    "CC20": 1.2,
    "CC22": 1.3
  },
  "CC22": {
    "CC21": 1.3,
    "CC23": 1.5,
    "EW19": 0.0,
    "EW21": 0.0,
    "NS27": 0.0,
    "TE18": 0.0
  },
  "CC23": {
    "CC22": 1.5,
    "CC24": 1.2
  },
  "CC24": {
    "CC23": 1.2,
    "CC25": 1.1
  },
  "CC25": {
    "CC24": 1.1,
    "CC26": 1.3
  },
  "CC26": {
    "CC25": 1.3,
    "CC27": 1.4
  },
  "CC27": {
    "CC26": 1.4,
    "CC28": 1.2
  },
  "CC28": {
    "CC27": 1.2,
    "CC29": 1.3
  },
  "CC29": {
    "CC28": 1.3
  },
  "DT1": {
    "DT2": 1.5
  },
  "DT2": {
    "DT1": 1.5,
    "DT3": 1.2
  },
  "DT3": {
    "DT2": 1.2,
    "DT5": 1.1
  },
  "DT5": {
    "DT3": 1.1,
    "DT6": 1.3
  },
  "DT6": {
    "DT5": 1.3,
    "DT7": 1.4
  },
  "DT7": {
    "DT6": 1.4,
    "DT8": 1.2
  },
  "DT8": {
    "DT7": 1.2,
    "DT9": 1.3
  },
  "DT9": {
    "DT8": 1.3,
    "DT10": 1.5,
    "NS9": 0.0,
    "CC9": 0.0,
    "CC19": 0.0
  },
  "DT10": {
    "DT9": 1.5,
    "DT11": 1.2,
    "TE10": 0.0
  },
  "DT11": {
    "DT10": 1.2,
    "DT12": 1.1,
    "NS21": 0.0
  },
  "DT12": {
    "DT11": 1.1,
    "DT13": 1.3,
    "NE7": 0.0
  },
  "DT13": {
    "DT12": 1.3,
    "DT14": 1.4
  },
  "DT14": {
    "DT13": 1.4,
    "DT15": 1.2,
    "EW12": 0.0
  },
  "DT15": {
    "DT14": 1.2,
    "DT16": 1.3,
    "NS26": 0.0,
    "EW13": 0.0,
    "CC4": 0.0
  },
  "DT16": {
    "DT15": 1.3,
    "DT17": 1.5
  },
  "DT17": {
    "DT16": 1.5,
    "DT18": 1.2
  },
  "DT18": {
    "DT17": 1.2,
    "DT19": 1.1
  },
  "DT19": {
    "DT18": 1.1,
    "NE4": 0.0
  },
  "TE1": {
    "TE2": 1.2
  },
  "TE2": {
    "TE1": 1.2,
    "TE3": 1.3,
    "NS9": 0.0
  },
  "TE3": {
    "TE2": 1.3,
    "TE4": 1.5
  },
  "TE4": {
    "TE3": 1.5,
    "TE5": 1.2
  },
  "TE5": {
    "TE4": 1.2,
    "TE6": 1.1
  },
  "TE6": {
    "TE5": 1.1,
    "TE7": 1.3
  },
  "TE7": {
    "TE6": 1.3,
    "TE8": 1.4
  },
  "TE8": {
    "TE7": 1.4,
    "TE9": 1.2
  },
  "TE9": {
    "TE8": 1.2,
    "TE10": 1.3,
    "CC15": 0.0,
    "CC17": 0.0
  },
  "TE10": {
    "TE9": 1.3,
    "TE11": 1.5,
    "DT10": 0.0
  },
  "TE11": {
    "TE10": 1.5,
    "TE12": 1.2,
    "EW14": 0.0
  },
  "TE12": {
    "TE11": 1.2,
    "TE13": 1.1
  },
  "TE13": {
    "TE12": 1.1,
    "TE14": 1.3,
    "NS22": 0.0
  },
  "TE14": {
    "TE13": 1.3,
    "TE15": 1.4,
    "NS14": 0.0,
    "NS27": 0.0
  },
  "TE15": {
    "TE14": 1.4,
    "TE16": 1.2
  },
  "TE16": {
    "TE15": 1.2,
    "TE17": 1.1,
    "EW16": 0.0
  },
  "TE17": {
    "TE16": 1.1,
    "TE18": 1.3
  },
  "TE18": {
    "TE17": 1.3,
    "TE19": 1.5,
    "CC22": 0.0
  },
  "TE19": {
    "TE18": 1.5,
    "TE20": 1.2,
    "NS27": 0.0
  },
  "TE20": {
    "TE19": 1.2
  }
}
</file>

<file path="next-env.d.ts">
/// <reference types="next" />
/// <reference types="next/image-types/global" />
// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.
</file>

<file path="next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
};
module.exports = nextConfig;
</file>

<file path="package.json">
{
  "dependencies": {
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-slot": "^1.1.2",
    "@types/mapbox-gl": "^3.4.1",
    "autoprefixer": "^10.4.20",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.477.0",
    "mapbox-gl": "^3.10.0",
    "next": "^15.2.1",
    "postcss": "^8.5.3",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-map-gl": "^7.1.6",
    "tailwind-merge": "^3.0.2",
    "tailwindcss": "^4.0.9",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4.0.9",
    "@types/node": "^22.13.9",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "typescript": "^5.8.2"
  },
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  }
}
</file>

<file path="postcss.config.js">
module.exports = {
  plugins: {
    "@tailwindcss/postcss": {},
    autoprefixer: {},
  },
}
</file>

<file path="README.md">
# Singapore MRT Fare Calculator

A web application that allows users to calculate MRT fares between any two stations in Singapore's MRT network.

## Features

- Interactive Singapore MRT map
- Station selection via map or dropdown menus
- Fare calculation based on distance traveled
- Support for different passenger types (Adult, Student, Senior)
- Support for different payment methods (Card, Cash)

## Technologies Used

- [Next.js](https://nextjs.org/) - React framework for server-side rendering
- [Shadcn UI](https://ui.shadcn.com/) - UI component library
- [Tailwind CSS](https://tailwindcss.com/) - Utility-first CSS framework
- [React Map GL](https://visgl.github.io/react-map-gl/) - React wrapper for Mapbox GL JS
- [TypeScript](https://www.typescriptlang.org/) - Typed JavaScript

## Getting Started

### Prerequisites

- Node.js 18.0.0 or later
- npm or yarn

### Installation

1. Clone the repository:
   ```bash
   git clone https://github.com/yourusername/sg-mrt-fare.git
   cd sg-mrt-fare
   ```

2. Install dependencies:
   ```bash
   npm install
   # or
   yarn install
   ```

3. Create a `.env.local` file in the root directory and add your Mapbox token:
   ```
   NEXT_PUBLIC_MAPBOX_TOKEN=your_mapbox_token_here
   ```

4. Start the development server:
   ```bash
   npm run dev
   # or
   yarn dev
   ```

5. Open [http://localhost:3000](http://localhost:3000) in your browser to see the application.

## Data Sources

- MRT station data: Based on publicly available information
- Fare data: Based on latest fare information as of December 2024
- Station distances: Simplified representation for demonstration purposes

## Disclaimer

This is an unofficial tool and fares may vary. Please refer to official sources for the most accurate information.

## License

This project is licensed under the MIT License - see the LICENSE file for details.
</file>

<file path="singapore-mrt-fare-calculator-prd.md">
Packing repository using repomix...
Querying Gemini AI using gemini-2.0-flash-thinking-exp-01-21...
Okay, let's create a detailed Product Requirements Document (PRD) for the Singapore MRT Fare Calculator application using Next.js and Shadcn UI.

# Product Requirements Document: Singapore MRT Fare Calculator

**1. Introduction**

This document outlines the requirements for a web-based Singapore MRT Fare Calculator application. The application aims to provide users with a simple and intuitive way to calculate MRT fares based on their chosen starting and ending stations. Leveraging the visual appeal and user-friendly components of Shadcn UI and the robust framework of Next.js, this application will be accessible, performant, and maintainable.

**2. Goals**

*   **Primary Goal:** To provide a user-friendly and accurate Singapore MRT fare calculator.
*   **Secondary Goals:**
    *   Offer multiple methods for station selection (map interaction and dropdown menus).
    *   Ensure the application is responsive and accessible across different devices.
    *   Utilize modern web technologies for performance and maintainability.
    *   Provide a visually appealing and intuitive user interface.

**3. Target Audience**

*   Commuters in Singapore who use the MRT system.
*   Tourists visiting Singapore who need to navigate the MRT.
*   Anyone needing to quickly estimate MRT fares for planning purposes.

**4. Features**

*   **MRT Map Interaction:**
    *   Display a clear and interactive map of the Singapore MRT network.
    *   Allow users to click on MRT stations on the map to select their starting and destination points.
    *   Visually highlight selected stations on the map.
    *   Provide station names on hover/click for clarity.
*   **Station Selection via Dropdowns:**
    *   Organize MRT stations into categorized dropdown menus based on MRT lines (e.g., North-South Line, East-West Line, etc.).
    *   Include an "All Stations" category for a complete alphabetical list.
    *   Implement a search/filter functionality within the dropdowns for quick station finding.
*   **Fare Calculation:**
    *   Accurately calculate the MRT fare based on the selected starting and destination stations.
    *   Display the calculated fare clearly in Singapore Dollars (SGD).
    *   Potentially display fare breakdowns (if available from data sources, e.g., distance-based fare + fixed charges).
*   **Route Display (Optional - Stretch Goal):**
    *   Visualize the shortest MRT route between selected stations on the map.
    *   List the stations along the calculated route.
*   **Clearance of Selections:**
    *   Provide a button or mechanism to easily clear selected starting and destination stations and reset the calculator.
*   **Responsive Design:**
    *   Ensure the application is fully responsive and works seamlessly on various screen sizes (desktops, tablets, and mobile devices).
*   **Accessibility:**
    *   Adhere to accessibility guidelines (WCAG) to ensure usability for users with disabilities.
    *   Provide proper ARIA attributes for interactive elements.
    *   Ensure sufficient color contrast for text and interactive elements.

**5. Technical Specifications**

*   **Frontend Framework:** Next.js (React framework for server-side rendering and routing)
*   **UI Kit/Component Library:** Shadcn UI (Tailwind CSS based component library for modern UI)
*   **Styling:** Tailwind CSS (Utility-first CSS framework, integrated with Shadcn UI)
*   **Mapping Library:**  Leaflet or Mapbox GL JS (For interactive MRT map display) - *Decision needed based on data format and ease of integration.*
*   **Programming Languages:** TypeScript (for type safety and better code maintainability), JavaScript (if necessary for specific libraries)
*   **State Management:** React Context API or Zustand (Lightweight state management for handling station selections and fare data)
*   **Testing:** Jest and React Testing Library (For unit and integration testing of components and logic)
*   **Deployment:** Vercel or Netlify (For easy deployment of Next.js applications)
*   **Version Control:** Git (using GitHub, GitLab, or Bitbucket)

**6. Data Sources and API Integration**

*   **MRT Station Data:**
    *   **Source 1 (Preferred):**  Official Singapore Land Transport Authority (LTA) Open Data portal or similar official government data sources. Look for datasets containing:
        *   Station names
        *   Station coordinates (latitude and longitude for map positioning)
        *   MRT line affiliations
        *   Potentially station codes or IDs for fare calculation lookups.
    *   **Source 2 (Alternative):** Community-maintained datasets (e.g., GitHub repositories, OpenStreetMap data). Verify accuracy and update frequency if using community data.
    *   **Data Format:**  Ideally JSON or CSV format for easy parsing in JavaScript.
*   **MRT Fare Data:**
    *   **Source 1 (Preferred):** LTA Open Data or official fare tables.  Look for data that defines fare calculation logic or provides fare matrices between stations.
    *   **Source 2 (Potentially needed API):** If direct fare data is not publicly available, investigate if there is an official or unofficial API that can calculate fares based on origin and destination stations.
    *   **Fare Calculation Logic:** Understand the Singapore MRT fare calculation logic (distance-based, peak/off-peak, concession fares etc.). For the initial version, focusing on standard adult fares is sufficient.  Concession fares can be a future enhancement.
*   **API Integration (if necessary):**
    *   If an API is used for fare calculation, document the API endpoints, request parameters, and response formats.
    *   Implement error handling for API requests (e.g., network errors, invalid responses).
    *   Consider API rate limits and caching strategies to optimize performance and avoid exceeding limits.

**7. UI/UX Design**

*   **Overall Style:** Clean, modern, and user-friendly, aligning with the Shadcn UI aesthetic.
*   **Homepage Layout:**
    *   Prominent display of the MRT map, taking up a significant portion of the screen (especially on desktop).
    *   Dropdown menus for station selection placed logically near the map or in a sidebar.
    *   Clear display area for the calculated fare.
    *   Minimalist design to avoid clutter and focus on the core functionality.
*   **Map Design:**
    *   Visually appealing and easy-to-understand representation of the MRT network.
    *   Clear station markers and line colors.
    *   Zoom and pan functionalities for map navigation.
    *   Tooltips or pop-ups to display station names on hover/click.
*   **Dropdown Design:**
    *   Well-organized and categorized dropdown menus for easy station selection.
    *   Search/filter functionality within dropdowns.
    *   Clear visual feedback when stations are selected from dropdowns.
*   **Fare Display:**
    *   Display the calculated fare in a prominent and easily readable format.
    *   Use clear currency symbols (SGD).
    *   Consider using a visually distinct section for the fare display.
*   **Color Palette:** Utilize a color palette that is accessible and visually appealing, possibly drawing inspiration from official Singapore MRT branding or public transport design guidelines.
*   **Typography:** Use clear and legible fonts for station names, fares, and other text elements.

**8. Implementation Plan**

*   **Phase 1: Project Setup and Data Integration (1-2 weeks)**
    *   Set up Next.js project with Shadcn UI and Tailwind CSS.
    *   Choose and integrate mapping library (Leaflet or Mapbox GL JS).
    *   Source and process MRT station data.
    *   Display MRT map with station markers.
    *   Implement basic station selection on the map (visual highlighting).
*   **Phase 2: Dropdown Station Selection and Fare Calculation Logic (2-3 weeks)**
    *   Implement station dropdown menus categorized by MRT lines.
    *   Connect dropdown selection to station highlighting on the map.
    *   Source or define MRT fare calculation logic.
    *   Implement fare calculation functionality based on selected stations.
    *   Display calculated fare.
*   **Phase 3: UI/UX Refinement, Testing, and Deployment (1-2 weeks)**
    *   Refine UI/UX based on usability best practices and feedback.
    *   Implement responsive design.
    *   Write unit and integration tests.
    *   Deploy the application to Vercel or Netlify.
    *   Conduct user testing and address any bugs or issues.

**9. Future Enhancements (Post-MVP)**

*   **Concession Fare Support:** Implement options for different passenger types (e.g., student, senior citizen) and calculate concession fares.
*   **Route Visualization:** Display the optimal MRT route on the map and list stations along the route.
*   **Journey Time Estimation:**  If data is available, estimate journey time based on selected stations.
*   **Real-time Service Status:** Integrate real-time MRT service status updates (if available via API).
*   **Multi-language Support:**  Localize the application for different languages.
*   **PWA (Progressive Web App) Features:**  Enable offline access and installability as a PWA.

**10. Success Metrics**

*   **User Engagement:**
    *   Number of unique visitors per month.
    *   Average session duration.
    *   Number of fare calculations performed.
*   **User Satisfaction:**
    *   User feedback through surveys or feedback forms.
    *   App store ratings (if deployed as a PWA).
*   **Performance Metrics:**
    *   Page load time.
    *   Application stability (error rate).
*   **Accuracy:**
    *   Verification of fare calculation accuracy against official fare tables.

This PRD provides a comprehensive outline for the Singapore MRT Fare Calculator application.  Regular review and updates to this document will be necessary throughout the development process to ensure alignment with project goals and user needs.
</file>

<file path="tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
    },
  },
  plugins: [],
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

</files>
